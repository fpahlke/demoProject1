[{"path":"https://fpahlke.github.io/demoProject1/articles/report.html","id":"install-project-from-github","dir":"Articles","previous_headings":"","what":"Install Project From GitHub","title":"Report","text":"","code":"if (!require(\"devtools\")) {     install.packages(\"devtools\")     } devtools::install_github(\"fpahlke/demoProject1\")"},{"path":"https://fpahlke.github.io/demoProject1/articles/report.html","id":"load-project","dir":"Articles","previous_headings":"","what":"Load Project","title":"Report","text":"","code":"library(demoProject1)"},{"path":"https://fpahlke.github.io/demoProject1/articles/report.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Report","text":"","code":"data <- load_data(system.file(\"extdata\", \"data.csv\", package = \"demoProject1\")) data |>     head() |>     knitr::kable()"},{"path":"https://fpahlke.github.io/demoProject1/articles/report.html","id":"summarise-data","dir":"Articles","previous_headings":"","what":"Summarise Data","title":"Report","text":"","code":"data_clean <- filter_complete(data, \"age\") summarise_parameter(data_clean, \"age\") #> $param_name #> [1] \"age\" #>  #> $mean #> [1] 50.12918 #>  #> $sd #> [1] 19.25734 summarise_parameter(data_clean, \"bmi\") #> $param_name #> [1] \"bmi\" #>  #> $mean #> [1] 25.13926 #>  #> $sd #> [1] 4.057264"},{"path":"https://fpahlke.github.io/demoProject1/articles/report.html","id":"add-session-info","dir":"Articles","previous_headings":"","what":"Add Session Info","title":"Report","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] demoProject1_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37     desc_1.4.3        R6_2.6.1          fastmap_1.2.0     #>  [5] xfun_0.53         cachem_1.1.0      knitr_1.50        htmltools_0.5.8.1 #>  [9] rmarkdown_2.29    lifecycle_1.0.4   cli_3.6.5         sass_0.4.10       #> [13] pkgdown_2.1.3     textshaping_1.0.3 jquerylib_0.1.4   systemfonts_1.2.3 #> [17] compiler_4.5.1    tools_4.5.1       ragg_1.5.0        evaluate_1.0.5    #> [21] bslib_0.9.0       yaml_2.3.10       jsonlite_2.0.0    rlang_1.1.6       #> [25] fs_1.6.6          htmlwidgets_1.6.4"},{"path":"https://fpahlke.github.io/demoProject1/articles/tests_and_coverage.html","id":"coverage","dir":"Articles","previous_headings":"","what":"Coverage","title":"Tests and Coverage","text":"Coverage summary created using covr package.","code":""},{"path":"https://fpahlke.github.io/demoProject1/articles/tests_and_coverage.html","id":"unit-tests","dir":"Articles","previous_headings":"","what":"Unit Tests","title":"Tests and Coverage","text":"Unit Test summary created using testthat package.","code":""},{"path":"https://fpahlke.github.io/demoProject1/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Friedrich Pahlke. Author, maintainer. Thomas Xprt. Author.","code":""},{"path":"https://fpahlke.github.io/demoProject1/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pahlke F, Xprt T (2025). demoProject1: Clean Code Helpers Reproducible R Analyses. R package version 0.0.0.9000, https://fpahlke.github.io/good-engineering-workshop-demo/.","code":"@Manual{,   title = {demoProject1: Clean Code Helpers for Reproducible R Analyses},   author = {Friedrich Pahlke and Thomas Xprt},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://fpahlke.github.io/good-engineering-workshop-demo/}, }"},{"path":"https://fpahlke.github.io/demoProject1/index.html","id":"demoproject1","dir":"","previous_headings":"","what":"Clean Code Helpers for Reproducible R Analyses","title":"Clean Code Helpers for Reproducible R Analyses","text":"small set pragmatic helper functions examples workshop clean R code statisticians. demonstrates explicit inputs/outputs, lightweight assertions custom messages, safe CSV loading, simple completeness filtering, concise parameter summaries. Intended teaching internal demos rather general-purpose production use.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/add_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Confidence Interval — add_ci","title":"Compute Confidence Interval — add_ci","text":"Computes confidence interval set point estimates using standard errors.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/add_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Confidence Interval — add_ci","text":"","code":"add_ci(estimates, se, alpha = 0.05)"},{"path":"https://fpahlke.github.io/demoProject1/reference/add_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Confidence Interval — add_ci","text":"estimates Numeric vector. point estimates. se Numeric vector. standard errors estimate. alpha Numeric. significance level use interval (default 0.05).","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/add_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Confidence Interval — add_ci","text":"data.frame following columns: estimate: original point estimates. ci_lower: lower bound computed confidence interval. ci_upper: upper bound computed confidence interval.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/add_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Confidence Interval — add_ci","text":"","code":"if (FALSE) { # \\dontrun{ estimates <- c(3, 5, 7) se <- c(0.5, 0.7, 0.6) add_ci(estimates, se) } # }"},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_dataframe_has_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Data Frame Has Column — assert_dataframe_has_column","title":"Assert Data Frame Has Column — assert_dataframe_has_column","text":"Validates provided data frame contains specified column. uses pre-existing checks validate data frame parameter name, verifies given column exists data frame.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_dataframe_has_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Data Frame Has Column — assert_dataframe_has_column","text":"","code":"assert_dataframe_has_column(df, param_name)"},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_dataframe_has_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Data Frame Has Column — assert_dataframe_has_column","text":"df data frame object validated. param_name Character. name column check data frame.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_dataframe_has_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Data Frame Has Column — assert_dataframe_has_column","text":"function return value. stops execution error message validations fail column present.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_dataframe_has_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert Data Frame Has Column — assert_dataframe_has_column","text":"","code":"if (FALSE) { # \\dontrun{   df <- data.frame(a = 1:5, b = 6:10)   assert_dataframe_has_column(df, \"a\") } # }"},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Valid Data Frame — assert_is_valid_data_frame","title":"Assert Valid Data Frame — assert_is_valid_data_frame","text":"Validates provided object valid data frame. checks data frame NULL, class data.frame, least one column one row.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Valid Data Frame — assert_is_valid_data_frame","text":"","code":"assert_is_valid_data_frame(df)"},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Valid Data Frame — assert_is_valid_data_frame","text":"df data frame object validated.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Valid Data Frame — assert_is_valid_data_frame","text":"function return value. stops execution error message validations fail.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert Valid Data Frame — assert_is_valid_data_frame","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(x = 1:10) assert_is_valid_data_frame(df) } # }"},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Is Valid Parameter — assert_is_valid_parameter","title":"Assert Is Valid Parameter — assert_is_valid_parameter","text":"Validates provided parameter name single character string NA.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Is Valid Parameter — assert_is_valid_parameter","text":"","code":"assert_is_valid_parameter(param_name)"},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Is Valid Parameter — assert_is_valid_parameter","text":"param_name Character. name parameter validate.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Is Valid Parameter — assert_is_valid_parameter","text":"function return value. stops execution error message validations fail.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/assert_is_valid_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert Is Valid Parameter — assert_is_valid_parameter","text":"","code":"if (FALSE) { # \\dontrun{   assert_is_valid_parameter(\"age\") } # }"},{"path":"https://fpahlke.github.io/demoProject1/reference/filter_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Complete — filter_complete","title":"Filter Complete — filter_complete","text":"Filters data frame removing rows specified column contains NA values.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/filter_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Complete — filter_complete","text":"","code":"filter_complete(df, param_name)"},{"path":"https://fpahlke.github.io/demoProject1/reference/filter_complete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Complete — filter_complete","text":"df data frame object filter. param_name Character. name column check non-NA values.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/filter_complete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Complete — filter_complete","text":"data.frame containing rows non-NA values specified column.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/filter_complete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Complete — filter_complete","text":"","code":"if (FALSE) { # \\dontrun{   df <- data.frame(a = c(1, NA, 3), b = c(4, 5, NA))   complete_df <- filter_complete(df, \"a\") } # }"},{"path":"https://fpahlke.github.io/demoProject1/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data from CSV File — load_data","title":"Load Data from CSV File — load_data","text":"Loads CSV file specified file path. checks file exists stops execution error message .","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data from CSV File — load_data","text":"","code":"load_data(path)"},{"path":"https://fpahlke.github.io/demoProject1/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data from CSV File — load_data","text":"path Character. file path CSV file.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data from CSV File — load_data","text":"data.frame containing CSV data.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/load_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data from CSV File — load_data","text":"","code":"if (FALSE) { # \\dontrun{   data <- load_data(\"data/file.csv\") } # }"},{"path":"https://fpahlke.github.io/demoProject1/reference/stopifnot_with_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Condition With Message — stopifnot_with_message","title":"Assert Condition With Message — stopifnot_with_message","text":"Checks condition stops execution custom error message condition met. error message formed concatenating additional arguments.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/stopifnot_with_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Condition With Message — stopifnot_with_message","text":"","code":"stopifnot_with_message(condition, message, ...)"},{"path":"https://fpahlke.github.io/demoProject1/reference/stopifnot_with_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Condition With Message — stopifnot_with_message","text":"condition Logical. condition evaluated. message Character. base message used condition FALSE. ... Additional message parts concatenated error message.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/stopifnot_with_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Condition With Message — stopifnot_with_message","text":"function return value. stops execution error message condition FALSE.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/stopifnot_with_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert Condition With Message — stopifnot_with_message","text":"","code":"if (FALSE) { # \\dontrun{   x <- 5   stopifnot_with_message(x > 10, \"x must be greater than 10\") } # }"},{"path":"https://fpahlke.github.io/demoProject1/reference/summarise_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Parameter — summarise_parameter","title":"Summarise Parameter — summarise_parameter","text":"Summarises parameter provided data frame computing mean standard deviation. first validates specified column exists data frame.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/summarise_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Parameter — summarise_parameter","text":"","code":"summarise_parameter(df, param_name)"},{"path":"https://fpahlke.github.io/demoProject1/reference/summarise_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Parameter — summarise_parameter","text":"df data frame object. param_name Character. name column summarise.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/summarise_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Parameter — summarise_parameter","text":"list following elements: param_name: name parameter. mean: computed mean parameter. sd: computed standard deviation parameter.","code":""},{"path":"https://fpahlke.github.io/demoProject1/reference/summarise_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Parameter — summarise_parameter","text":"","code":"if (FALSE) { # \\dontrun{   df <- data.frame(a = rnorm(100))   summarise_parameter(df, \"a\") } # }"}]
